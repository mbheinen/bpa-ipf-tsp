 
 
object
!***VUIT_Manage false ***
    solve_dialog: XmFormDialog
        {
        arguments
            {
            XmNdialogTitle = compound_string("SOLVE");
            XmNautoUnmanage = false;
            XmNheight = 570;
            };
        controls
            {
            XmFrame solve_area_frame;
            XmFrame solve_LTC_frame;
            XmLabelGadget solve_LTC_label;
            XmFrame solve_phase_bias_frame;
            XmLabelGadget solve_phase_shift_bias_label;
            XmForm solve_iteration_form;
            XmPushButton solve_solve_pb;
            XmPushButton solve_reset_pb;
            XmPushButton solve_close_pb;
            XmForm solve_limits_form;
            XmForm solve_debug_form;
            XmLabelGadget solve_misc_control_label;
            XmForm solve_misc_control_form;
            XmLabelGadget solve_ai_control_label;
            XmToggleButton solve_base_solution_tb;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_LTC_frame: XmFrame
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 30;
            XmNleftOffset = 10;
            };
        controls
            {
            XmRadioBox
                {
                arguments
                    {
                    XmNisHomogeneous = false;
                    };
                controls
                    {
                    XmToggleButton solve_LTC_on_rb;
                    XmToggleButton solve_LTC_RPRQ_rb;
                    XmToggleButton solve_LTC_RV_rb;
                    XmToggleButton solve_LTC_DC_rb;
                    XmToggleButton solve_LTC_off_rb;
                    };
                };
            };
        };
    solve_area_frame: XmFrame
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_POSITION;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNtopPosition = 48;
            XmNrightPosition = 17;
            XmNleftPosition = 2;
            XmNrightAttachment = XmATTACH_POSITION;
            };
        controls
            {
            XmRadioBox
                {
                arguments
                    {
                    XmNisHomogeneous = false;
                    };
                controls
                    {
                    XmToggleButton solve_area_on_rb;
                    XmToggleButton solve_area_mon_rb;
                    XmToggleButton solve_area_off_rb;
                    };
                };
            };
        };
    solve_phase_bias_frame: XmFrame
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_POSITION;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNrightAttachment = XmATTACH_POSITION;
            XmNtopPosition = 77;
            XmNrightPosition = 17;
            XmNleftPosition = 2;
            };
        controls
            {
            XmRadioBox
                {
                arguments
                    {
                    XmNisHomogeneous = false;
                    XmNorientation = XmVERTICAL;
                    XmNwidth = 210;
                    };
                controls
                    {
                    XmToggleButton solve_phase_BPA_rb;
                    XmToggleButton solve_phase_WSCC_rb;
                    };
                };
            };
        };
    solve_decoupled_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Decoupled Start");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 6;
            XmNtopOffset = 2;
            XmNtopWidget = XmLabelGadget solve_iteration_control_label;
            };
        };
    solve_decoupled_text: XmTextField
        {
        arguments
            {
            arguments text_list_2;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmLabelGadget solve_decoupled_label;
            XmNtopWidget = XmLabelGadget solve_decoupled_label;
            XmNleftOffset = 200;
            XmNvalue = "2";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                digit_check(0);
                };
            XmNlosingFocusCallback = procedures
                {
                data_check("[0<10]");
                };
            };
        };
    solve_newton_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Newton-Raphson");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget solve_decoupled_label;
            XmNtopWidget = XmLabelGadget solve_decoupled_label;
            XmNtopOffset = 8;
            };
        };
    solve_newton_text: XmTextField
        {
        arguments
            {
            arguments text_list_2;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmTextField solve_decoupled_text;
            XmNtopWidget = XmLabelGadget solve_newton_label;
            XmNvalue = "30";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                digit_check(0);
                };
            XmNlosingFocusCallback = procedures
                {
                data_check("[0<30]");
                };
            };
        };
    solve_iteration_form: XmForm
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNshadowThickness = 2;
            XmNshadowType = XmSHADOW_ETCHED_IN;
            XmNleftWidget = XmForm solve_limits_form;
            XmNtopWidget = XmForm solve_limits_form;
            XmNtopOffset = 10;
            XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNrightWidget = XmForm solve_limits_form;
            XmNbottomPosition = 85;
            XmNbottomAttachment = XmATTACH_POSITION;
            };
        controls
            {
            XmLabelGadget solve_decoupled_label;
            XmTextField solve_decoupled_text;
            XmLabelGadget solve_newton_label;
            XmTextField solve_newton_text;
            XmToggleButton solve_iter_summary_tb;
            XmLabelGadget solve_iteration_control_label;
            };
        };
    solve_solve_pb: XmPushButton
        {
        arguments
            {
            arguments blue_pushbutton;
            XmNlabelString = compound_string("Solve");
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNrightAttachment = XmATTACH_POSITION;
            XmNbottomAttachment = XmATTACH_NONE;
            XmNwidth = 111;
            XmNleftOffset = 10;
            XmNtopWidget = XmPushButton solve_reset_pb;
            XmNrightPosition = 66;
            XmNleftWidget = XmPushButton solve_reset_pb;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                unmanage_solve_dialog(0);
                pfsolution_cb(0);
                };
            };
        };
    solve_reset_pb: XmPushButton
        {
        arguments
            {
            arguments std_pushbutton;
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNlabelString = compound_string("Reset");
            XmNrightAttachment = XmATTACH_POSITION;
            XmNleftOffset = 10;
            XmNrightPosition = 33;
            XmNbottomOffset = 10;
            XmNtopPosition = 93;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                solve_reset(0);
                };
            };
        };
    solve_close_pb: XmPushButton
        {
        arguments
            {
            arguments close_pushbutton_list;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftOffset = 10;
            XmNtopWidget = XmPushButton solve_solve_pb;
            XmNleftWidget = XmPushButton solve_solve_pb;
            XmNrightAttachment = XmATTACH_FORM;
            XmNrightOffset = 10;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                unmanage_solve_dialog(0);
                };
            };
        };
    solve_area_on_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("CON");
            XmNset = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_area_off_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string(" OFF");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_LTC_on_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("On");
            XmNset = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_LTC_RPRQ_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("RP & RQ");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_LTC_RV_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("No Ph Shift");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_LTC_DC_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("DC Only");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_LTC_off_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("Off");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_phase_BPA_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("BPA");
            XmNset = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_phase_WSCC_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("WSCC");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_limits_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Limits");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 4;
            XmNrightAttachment = XmATTACH_FORM;
            };
        };
    solve_limits_qres_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 50;
            XmNtopWidget = XmLabelGadget solve_limits_label;
            XmNleftPosition = 60;
            XmNrightAttachment = XmATTACH_NONE;
            XmNvalue = ".10";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_limit_pha_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNtopWidget = XmTextField solve_limits_qres_text;
            XmNleftWidget = XmTextField solve_limits_qres_text;
            XmNvalue = "45.001";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_limits_DA_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNtopWidget = XmTextField solve_limit_pha_text;
            XmNleftWidget = XmTextField solve_limit_pha_text;
            XmNvalue = "1.000";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_limit_pha_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Min Phase Angle");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_limit_pha_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_limit_pha_text;
            XmNrightOffset = 20;
            };
        };
    solve_limits_DV_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNtopWidget = XmTextField solve_limits_DA_text;
            XmNleftWidget = XmTextField solve_limit_pha_text;
            XmNvalue = ".150";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_limits_DA_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Delta Angle");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_limits_DA_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_limits_DA_text;
            XmNrightOffset = 20;
            };
        };
    solve_limits_DV_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Delta Volts");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_limits_DV_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_limits_DV_text;
            XmNrightOffset = 20;
            };
        };
    solve_limit_qres_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("QRes");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_limits_qres_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_limits_qres_text;
            XmNrightOffset = 20;
            };
        };
    solve_limits_form: XmForm
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNleftPosition = 25;
            XmNrightPosition = 72;
            XmNtopPosition = 4;
            XmNbottomPosition = 60;
            XmNrightAttachment = XmATTACH_POSITION;
            XmNbottomAttachment = XmATTACH_POSITION;
            };
        controls
            {
            XmLabelGadget solve_limits_label;
            XmLabelGadget solve_limit_qres_label;
            XmLabelGadget solve_limit_pha_label;
            XmLabelGadget solve_limits_DA_label;
            XmLabelGadget solve_limits_DV_label;
            XmTextField solve_limits_qres_text;
            XmTextField solve_limit_pha_text;
            XmTextField solve_limits_DA_text;
            XmTextField solve_limits_DV_text;
            XmLabelGadget solve_tolerance_label;
            XmTextField solve_tol_busv_text;
            XmLabelGadget solve_tol_BUSN_label;
            XmLabelGadget solve_tol_aipower_label;
            XmTextField solvel_tol_aipower_text;
            XmTextField solve_tolerance_tx_text;
            XmTextField solve_tolerance_q_text;
            XmLabelGadget solve_tol_BX_label;
            XmLabelGadget solve_tolerance_Q_label;
            };
        };
    solve_tol_busv_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNleftWidget = XmTextField solve_limits_DV_text;
            XmNtopWidget = XmLabelGadget solve_tolerance_label;
            XmNvalue = ".005";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_tolerance_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Tolerances");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNleftOffset = -70;
            XmNleftWidget = XmTextField solve_limits_DV_text;
            XmNtopWidget = XmTextField solve_limits_DV_text;
            XmNtopPosition = 50;
            };
        };
    solvel_tol_aipower_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNtopWidget = XmTextField solve_tol_busv_text;
            XmNleftWidget = XmTextField solve_tol_busv_text;
            XmNvalue = ".001";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_tolerance_tx_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNtopWidget = XmTextField solvel_tol_aipower_text;
            XmNleftWidget = XmTextField solvel_tol_aipower_text;
            XmNvalue = ".001";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_tolerance_q_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 50;
            XmNtopWidget = XmTextField solve_tolerance_tx_text;
            XmNleftWidget = XmTextField solve_tolerance_tx_text;
            XmNvalue = ".005";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNmodifyVerifyCallback = procedures
                {
                decimal_check(0);
                };
            };
        };
    solve_tol_aipower_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("AI POWER");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solvel_tol_aipower_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solvel_tol_aipower_text;
            XmNrightOffset = 10;
            };
        };
    solve_tolerance_Q_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Q");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_tolerance_q_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_tolerance_q_text;
            XmNrightOffset = 20;
            };
        };
    solve_debug_tx_pb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("TX");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 35;
            XmNtopWidget = XmLabelGadget solve_debug_label;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_debug_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Debug");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNrightAttachment = XmATTACH_FORM;
            };
        };
    solve_debug_ai_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("AI");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButton solve_debug_bus_tb;
            XmNleftWidget = XmToggleButton solve_debug_bus_tb;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_debug_bus_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("BUS");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButton solve_debug_tx_pb;
            XmNleftWidget = XmToggleButton solve_debug_tx_pb;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_debug_dc_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("DC");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButton solve_debug_ai_tb;
            XmNleftWidget = XmToggleButton solve_debug_ai_tb;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_debug_form: XmForm
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNleftWidget = XmForm solve_limits_form;
            XmNrightAttachment = XmATTACH_POSITION;
            XmNtopPosition = 4;
            XmNleftPosition = 75;
            XmNbottomPosition = 28;
            XmNbottomAttachment = XmATTACH_POSITION;
            XmNrightPosition = 96;
            };
        controls
            {
            XmLabelGadget solve_debug_label;
            XmToggleButton solve_debug_tx_pb;
            XmToggleButton solve_debug_bus_tb;
            XmToggleButton solve_debug_ai_tb;
            XmToggleButton solve_debug_dc_tb;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                };
            };
        };
    solve_iteration_control_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Iteration Control");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 2;
            XmNrightAttachment = XmATTACH_FORM;
            XmNleftOffset = 5;
            XmNrightOffset = 5;
            };
        };
    solve_ai_control_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Area",separate=true) &
                compound_string("Interchange",separate=true) &
                compound_string("Control");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmFrame solve_area_frame;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmFrame solve_area_frame;
            };
        };
    solve_misc_flat_start_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("Flat Start");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNleftOffset = 5;
            XmNtopOffset = 1;
            XmNset = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_phase_shift_bias_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Phase ",separate=true) &
                compound_string("Shifter ",separate=true) &
                compound_string("Bias");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmFrame solve_phase_bias_frame;
            XmNleftOffset = 5;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmFrame solve_phase_bias_frame;
            };
        };
    solve_LTC_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("LTC");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmFrame solve_LTC_frame;
            XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNrightWidget = XmFrame solve_LTC_frame;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmFrame solve_LTC_frame;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 10;
            };
        };
    solve_misc_cont_tstart_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 20;
            XmNtopWidget = XmLabelGadget solve_tap_start_label;
            XmNvalue = "0.5";
            XmNleftWidget = XmLabelGadget solve_tap_start_label;
            };
        callbacks
            {
            XmNmodifyVerifyCallback = procedures
                {
                digit_check(0);
                };
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_tap_start_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Tap Start");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 5;
            XmNtopWidget = XmRadioBox solve_misc_volt_bias_rb;
            XmNleftWidget = XmRadioBox solve_misc_volt_bias_rb;
            };
        };
    solve_misc_cont_TX_bia_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("BX Voltage Bias");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNleftOffset = 2;
            XmNtopPosition = 20;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_misc_dclp_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("DCLP");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 5;
            XmNtopOffset = 1;
            XmNtopWidget = XmToggleButton solve_misc_flat_start_tb;
            XmNset = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_misc_volt_bias_rb: XmRadioBox
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNisHomogeneous = false;
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 10;
            XmNtopOffset = 2;
            XmNtopWidget = XmLabelGadget solve_misc_cont_TX_bia_label;
            };
        controls
            {
            XmToggleButton solve_volts_bias_BPA_rb;
            XmToggleButton solve_volts_bias_WSCC_rb;
            XmToggleButton solve_volts_bias_VMAX_rb;
            };
        };
    solve_misc_control_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("Misc Control");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmForm solve_misc_control_form;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmForm solve_misc_control_form;
            };
        };
    solve_volts_bias_BPA_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNx = 4;
            XmNy = 7;
            XmNlabelString = compound_string("BPA");
            XmNset = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_volts_bias_WSCC_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNx = 13;
            XmNy = 17;
            XmNlabelString = compound_string("WSCC");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_iter_summary_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("Iteration Summary");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 8;
            XmNtopOffset = 10;
            XmNtopWidget = XmTextField solve_newton_text;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNbottomOffset = 10;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_numvsteps_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("VSTEPS");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 5;
            XmNtopWidget = XmTextField solve_misc_cont_tstart_text;
            XmNleftWidget = XmTextField solve_misc_cont_tstart_text;
            };
        };
    solve_numvsteps_text: XmTextField
        {
        arguments
            {
            arguments text_list_6;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNleftOffset = 17;
            XmNtopOffset = 20;
            XmNtopWidget = XmLabelGadget solve_numvsteps_label;
            XmNleftWidget = XmTextField solve_misc_cont_tstart_text;
            XmNbottomAttachment = XmATTACH_NONE;
            XmNvalue = "3";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            XmNvalueChangedCallback = procedures
                {
                };
            };
        };
    solve_base_solution_tb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNlabelString = compound_string("Use Base Solution  (Don\'t Solve)");
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 10;
            XmNtopWidget = XmForm solve_iteration_form;
            XmNleftWidget = XmForm solve_iteration_form;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_misc_control_form: XmForm
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNrightAttachment = XmATTACH_POSITION;
            XmNtopPosition = 33;
            XmNrightPosition = 95;
            XmNbottomPosition = 90;
            XmNleftPosition = 75;
            XmNbottomAttachment = XmATTACH_POSITION;
            XmNtopAttachment = XmATTACH_POSITION;
            };
        controls
            {
            XmToggleButton solve_misc_flat_start_tb;
            XmToggleButton solve_misc_dclp_tb;
            XmLabelGadget solve_misc_cont_TX_bia_label;
            XmRadioBox solve_misc_volt_bias_rb;
            XmLabelGadget solve_tap_start_label;
            XmTextField solve_misc_cont_tstart_text;
            XmLabelGadget solve_numvsteps_label;
            XmTextField solve_numvsteps_text;
            };
        };
    solve_area_mon_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNx = 28;
            XmNy = 27;
            XmNlabelString = compound_string("MON");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_volts_bias_VMAX_rb: XmToggleButton
        {
        arguments
            {
            arguments toggle_defs;
            XmNx = 14;
            XmNy = 25;
            XmNlabelString = compound_string("VMAX");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                register_name(0);
                };
            };
        };
    solve_tol_BUSN_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("BUSV");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_tol_busv_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_tol_busv_text;
            XmNrightOffset = 10;
            };
        };
    solve_tol_BX_label: XmLabelGadget
        {
        arguments
            {
            XmNlabelString = compound_string("TX");
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmTextField solve_tolerance_tx_text;
            XmNrightAttachment = XmATTACH_WIDGET;
            XmNrightWidget = XmTextField solve_tolerance_tx_text;
            XmNrightOffset = 20;
            };
        };
